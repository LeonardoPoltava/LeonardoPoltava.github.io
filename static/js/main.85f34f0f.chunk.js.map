{"version":3,"sources":["components/info.js","components/form.js","components/weather.js","App.js","serviceWorker.js","index.js"],"names":["Info","react_default","a","createElement","className","Form","props","action","onSubmit","weatherMethod","type","name","placeholder","Weather","city","country","temp","pressure","sunset","error","API_KEY","App","state","undefined","gettingWeather","_callee","e","api_url","data","sunset_date","regenerator_default","wrap","_context","prev","next","preventDefault","target","elements","value","fetch","concat","sent","json","sys","ms","date","Date","hours","getHours","minutes","getMinutes","seconds","getSeconds","substr","time","_this","setState","main","stop","info","components_form","this","weather","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.85f34f0f.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nconst Info = () => (\n  <div className=\"info\">\n    <h2>Приложение с погодой</h2>\n    <p>Узнайте погоду в вашем городе</p>\n  </div>\n)\n\nexport default Info;\n","import React, { Component } from 'react';\n\nconst Form = props => (\n  <form action=\"\" className=\"weather-form\" onSubmit={props.weatherMethod}>\n    <input type=\"text\" name=\"city\" placeholder=\"Город\" />\n    <button>Получить погоду</button>\n  </form>\n)\n\nexport default Form;\n","import React, { Component } from 'react';\n\nconst Weather = props => {\n  return (\n    <div className=\"weather-box\">\n      { props.city &&\n        <div>\n          <p><span className=\"weather-title\">Местоположение:</span> {props.city}, {props.country}</p>\n          <p><span className=\"weather-title\">Температура:</span> {props.temp}</p>\n          <p><span className=\"weather-title\">Давление:</span> {props.pressure}</p>\n          <p><span className=\"weather-title\">Заход солнца:</span> {props.sunset}</p>\n        </div>\n      }\n      <p>{props.error}</p>\n    </div>\n  );\n}\n\nexport default Weather;\n","import React, { Component } from 'react';\nimport Info from './components/info';\nimport Form from './components/form';\nimport Weather from './components/weather';\nimport './App.css';\n\nconst API_KEY = \"0713c8fe88b7198994a3c4b99eb3c74f\";\n\nclass App extends Component {\n\n  state = {\n    temp: undefined,\n    city: undefined,\n    country: undefined,\n    pressure: undefined,\n    sunset: undefined,\n    error: undefined\n  }\n\n  gettingWeather = async (e) => {\n    e.preventDefault();\n    let city = e.target.elements.city.value;\n\n    if(city) {\n      const api_url = await fetch(`https://api.openweathermap.org/data/2.5/weather?q=${city}&appid=${API_KEY}&units=metric`);\n      const data = await api_url.json();\n      if(data.name) {\n        let sunset = data.sys.sunset;\n        const time = ms =>{\n          var date = new Date(ms*1000);\n          var hours = date.getHours();\n          var minutes = \"0\" + date.getMinutes();\n          var seconds = \"0\" + date.getSeconds();\n          return hours + ':' + minutes.substr(-2) + ':' + seconds.substr(-2);\n        }\n        var sunset_date = time(sunset);﻿\n\n        this.setState({\n          temp: data.main.temp,\n          city: data.name,\n          country: data.sys.country,\n          pressure: data.main.pressure,\n          sunset: sunset_date,\n          error: undefined\n        });\n      }\n      else {\n        this.setState({\n          temp: undefined,\n          city: undefined,\n          country: undefined,\n          pressure: undefined,\n          sunset: undefined,\n          error: \"Нужно ввести правильный город на английском (нап. Kiev или Poltava)\"\n        });\n      }\n    }\n    else {\n      this.setState({\n        temp: undefined,\n        city: undefined,\n        country: undefined,\n        pressure: undefined,\n        sunset: undefined,\n        error: \"Введите название города\"\n      });\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"weather\">\n        <Info />\n        <div className=\"weather-inner\">\n          <Form weatherMethod={this.gettingWeather} />\n          <Weather\n            temp={this.state.temp}\n            city={this.state.city}\n            country={this.state.country}\n            pressure={this.state.pressure}\n            sunset={this.state.sunset}\n            error={this.state.error}\n          />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}